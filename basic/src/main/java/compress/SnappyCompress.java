package compress;

import com.alibaba.fastjson.JSON;
import compare.Persion;
import io.protostuff.LinkedBuffer;
import io.protostuff.ProtostuffIOUtil;
import io.protostuff.runtime.RuntimeSchema;
import org.apache.lucene.util.RamUsageEstimator;
import org.xerial.snappy.Snappy;

import java.io.IOException;
import java.util.Base64;

public class SnappyCompress {
    public static void main(String[] args) throws IOException {
        String orginal久-暲俔";
        byte[] compress = Snappy.compress(orginal.getBytes("UTF-8"));
        System.out.println("orginal size:" + RamUsageEstimator.humanSizeOf(orginal));
        System.out.println("orginal size:" + RamUsageEstimator.humanSizeOf(orginal.getBytes("UTF-8")));
        System.out.println("after compress size:" + RamUsageEstimator.humanSizeOf(compress));
        String restore = new String(Snappy.uncompress(compress));
        System.out.println("after uncompress size:" + RamUsageEstimator.humanSizeOf(restore));
        RuntimeSchema<String> schema = RuntimeSchema.createFrom((Class<String>) orginal.getClass());
        LinkedBuffer buffer = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);
        byte[] protostuff = null;
        try {
            protostuff = ProtostuffIOUtil.toByteArray(orginal, schema, buffer);
            System.out.println("after protostuff size:" + RamUsageEstimator.humanSizeOf(protostuff));
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            buffer.clear();

        }
        Persion persion = new Persion();
        persion.setName("aaaaaaaaaaaaaaa");
        persion.setAge(18);
        String json = JSON.toJSONString(persion);
        System.out.println("persion orginal  size:" + RamUsageEstimator.humanSizeOf(persion));
        System.out.println("persion after fasjson size:" + RamUsageEstimator.humanSizeOf(json.getBytes()));
        RuntimeSchema<Persion> persionSchema = RuntimeSchema.createFrom(Persion.class);
        LinkedBuffer persionbuffer = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);
        byte[] persionprotostuff = ProtostuffIOUtil.toByteArray(persion, persionSchema, persionbuffer);
        System.out.println("persion after protostuff size:" + RamUsageEstimator.humanSizeOf(persionprotostuff));
        persionbuffer.clear();
        String compressToBase64 = Base64.getEncoder().encodeToString(compress);
        System.out.println("compressToJsonStr size:" + RamUsageEstimator.humanSizeOf(compressToBase64));
        System.out.println(compressToBase64);
    }
}